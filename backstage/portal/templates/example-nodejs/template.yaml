apiVersion: scaffolder.backstage.io/v1beta3
# https://backstage.io/docs/features/software-catalog/descriptor-format#kind-template
kind: Template
metadata:
  name: example-nodejs-template
  title: Node.js Express webapp
  description: >-
    Create a starter Node.js web application running on
    an Express server.
    This is demonstration only.
  tags:
    - nodejs
    - aws
spec:
  owner: group:admins
  type: website

  # These parameters are used to generate the input form in the frontend, and are
  # used to gather input data for the execution of the template.
  parameters:
    - title: Provide basic component information
      required:
        - component_id
      properties:
        component_id:
          title: Name
          type: string
          description: Unique name of the component
          ui:field: EntityNamePicker
          ui:autofocus: true
        description:
          title: Description
          type: string
          description: Help others understand what this service is for
        owner:
          title: Owner
          type: string
          description: Owner of the component
          ui:field: OwnerPicker
          ui:options:
            catalogFilter:
              kind: [Group]
    - title: Provide environment information for the application
      required:
        - environment
      properties:
        environment:
          title: AWS Environment
          type: string
          description: The AWS Environment where the database is created
          ui:field: EntityPicker
          ui:options:
            allowedKinds:
              - AWSEnvironment
    # - title: Specify database information
    # required:
    #   - db_type
    #   - instance_size
    # properties:
    # db_type:
    #   title: Database engine
    #   type: string
    #   description: The type of database to create
    #   default: aurora_postgresql
    #   enum:
    #     - aurora_mysql
    #     - aurora_postgresql
    #     - mysql
    #     - postgresql
    #     - mariadb
    #   enumNames:
    #     - "Aurora MySQL"
    #     - "Aurora PostgreSQL"
    #     - "MySQL"
    #     - "PostgreSQL"
    #     - "MariaDB"
    # instance_size:
    #   title: Database size
    #   type: string
    #   description: The size of the database required
    #   default: small
    #   enum:
    #     - small
    #     - medium
    #     - large
    #   enumNames:
    #     - "Small (20 GB) - development/prototypes"
    #     - "Medium (100 GB) - dev/test scenarios"
    #     - "Large (500 GB) - production scenarios"
    # db_name:
    #   title: Database name
    #   type: string
    #   description: The name of a default database to create
    #   default: sampledb

    - title: Choose a git repository location
      required:
        - repoUrl
      properties:
        repoUrl:
          title: Repository Location
          type: string
          ui:field: RepoUrlPicker
          ui:options:
            allowedHosts:
              - {{ gitlab_hostname }}
            allowedOwners:
              - aws-app

  # These steps are executed in the scaffolder backend, using data that we gathered
  # via the parameters above.
  steps:
    # Each step executes an action, in this case one templates files into the working directory.
    - id: bawsDeployECSBoilerplate
      name: Deploy BAWS Boilerplate
      action: baws:deploy-boilerplate
      input:
        boilerplateRepositories:
          - aws_ecs
        inputParameters:
          APP_SHORT_NAME: ${{ parameters.component_id}}
          APP_ENV_PLAINTEXT:
            PORT: "3001"
          # Example for adding tags to resources created by CDK/CodeBuild (via the boilerplate)
          # AWS_RESOURCE_TAGS:
          #   - Key: CostCenter
          #     Value: HR-1234
        environmentRef: ${{ parameters.environment }}
        actionType: "Create App"
        # tags:
        #   - Key: "key1"
        #     Value: "value1"
    - id: createSecretManager
      name: Create a Secret
      action: baws:create-secret
      input:
        secretName: aws-apps-${{ (parameters.repoUrl | parseRepoUrl).repo | lower }}-access-token
        region: ${{ steps['bawsDeployECSBoilerplate'].output.region }}
        accountId: ${{ steps['bawsDeployECSBoilerplate'].output.account }}
        description: "Gitlab repo access token"
        tags:
          - Key: "aws-apps:${{ parameters.component_id }}"
            Value: ${{ parameters.component_id }}
    - id: fetchBase
      name: Fetch Base
      action: fetch:template
      input:
        url: ./content
        values:
          component_id: ${{ parameters.component_id }}
          description: ${{ parameters.description }}
          owner: ${{ parameters.owner }}
          aws_environment: ${{ parameters.environment }}
          aws_region: ${{ steps['bawsDeployECSBoilerplate'].output.region }}
          aws_account: ${{ steps['bawsDeployECSBoilerplate'].output.account }}
          destination: ${{ parameters.repoUrl | parseRepoUrl }}
          aws_pipeline_arn: ${{ steps['bawsDeployECSBoilerplate'].output.executionArn }}
          aws_bp_outputs: ${{ steps['bawsDeployECSBoilerplate'].output.cfnOutputs }}
          aws_secret_repo_arn: ${{ steps['createSecretManager'].output.awsSecretArn }}
          app_port: "3002"
    # This step publishes the contents of the working directory to GitLab.
    - id: publish
      name: Publish
      action: publish:gitlab
      input:
        repoUrl: ${{ parameters.repoUrl }}
        repoVisibility: internal
        defaultBranch: main
    - id: createRepoToken
      name: Create Repo Token
      action: baws:createRepoAccessToken:gitlab
      input:
        repoUrl: ${{ parameters.repoUrl }}
        projectId: ${{ steps['publish'].output.projectId }}
        secretArn: ${{ steps['createSecretManager'].output.awsSecretArn }}
        region: ${{ steps['bawsDeployECSBoilerplate'].output.region }}
        accountId: ${{ steps['bawsDeployECSBoilerplate'].output.account }}
    # The final step is to register our new component in the catalog.
    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps['publish'].output.repoContentsUrl }}
        catalogInfoPath: "/.backstage/catalog-info.yaml"

  # Outputs are displayed to the user after a successful execution of the template.
  output:
    links:
      - title: Repository
        url: ${{ steps['publish'].output.remoteUrl }}
      - title: Open in catalog
        icon: catalog
        entityRef: ${{ steps['register'].output.entityRef }}
